# Subset to WWP samples
Bact = subset_samples(Bact, Project_Name == "Woolsey_Wet_Prairie")
Fung = subset_samples(Fung, Project_Name == "Woolsey_Wet_Prairie")
# remove unwnated columns
bactcols = names(sample_data(Bact)) %in% c("SampleID","Latitude","Longitude","Elevation")
fungcols = names(sample_data(Fung)) %in% c("SampleID","Latitude","Longitude","Elevation")
sample_data(Bact) <- sample_data(Bact)[,bactcols]
sample_data(Fung) <- sample_data(Fung)[,fungcols]
# remove PCR postive control in Fung
Fung = subset_samples(Fung, SampleID != "Fungal-POS")
# Add soil metadata and merge all into one phyloseq object
sample_names(Bact) <- str_remove(sample_names(Bact),"-B")
sample_names(Fung) <- str_remove(sample_names(Fung),"-F")
meta = read.csv("./soils_data_w2_parse.csv")
meta$SampleID <- paste0("WS-",meta$cluster,"-",meta$num)
row.names(meta) <- meta$SampleID
wwp = merge_phyloseq(Fung,Bact)
wwp = merge_phyloseq(wwp,sample_data(meta))
# remove negative controls
wwp = subset_samples(wwp, sample_names(wwp) %ni% c("WS-Neg-1","WS-Neg-2","WS-Neg-3","WS-Pos-1"))
# Re-separate fungi and bacteria for downstream
Bact = subset_taxa(wwp, Kingdom == "Bacteria")
Fung = subset_taxa(wwp, Kingdom == "k__Fungi")
# Remove singletons and doublets
Bact = subset_taxa(Bact, taxa_sums(Bact) > 2)
Fung = subset_taxa(Fung, taxa_sums(Fung) > 2)
wwp = subset_taxa(wwp, taxa_sums(wwp) > 2)
# Remove empty samples (if any)
Bact = subset_samples(Bact, sample_sums(Bact) > 0)
Fung = subset_samples(Fung, sample_sums(Fung) > 0)
wwp = subset_samples(wwp, sample_sums(wwp) > 0)
# convert wwp OTU table to presence-absence so ITS and 16S can be compared
wwp.pa <- transform_sample_counts(wwp, function(abund) 1*(abund>0))
# Save phyloseq objects as files
saveRDS(Bact, "./output/WWP_16S_phyloseq.RDS")
saveRDS(Fung, "./output/WWP_ITS_phyloseq.RDS")
saveRDS(wwp.pa, "./output/WWP_Full_phyloseq_object_presence-absence.RDS")
saveRDS(wwp,"output/WWP_Full_phyloseq_object.RDS")
# Explore soils data
# load packages ####
library(tidyverse)
library(ggplot2)
library(ggtern)
library(plyr)
# load phyloseq object (Full WWP data set) ####
wwp = readRDS("./output/WWP_Full_phyloseq_object.RDS")
wwp.pa = readRDS("./output/WWP_Full_phyloseq_object_presence-absence.RDS")
bact = readRDS("./output/WWP_16S_phyloseq.RDS")
fung = readRDS("./output/WWP_ITS_phyloseq.RDS")
# remove any empty samples or ASVs
wwp.pa = subset_taxa(wwp.pa, sample_sums(wwp.pa) > 0)
bact = subset_taxa(bact, sample_sums(bact) > 0)
fung = subset_taxa(fung, sample_sums(fung) > 0)
wwp.pa = subset_samples(wwp.pa, taxa_sums(wwp.pa) > 0)
bact = subset_samples(bact, taxa_sums(bact) > 0)
fung = subset_samples(fung, taxa_sums(fung) > 0)
# Examine metadata ####
glimpse(as.data.frame(sample_data(wwp.pa)))
glimpse(as.data.frame(sample_data(fung)))
# Species richness (bact + fungi)
richness.total = sample_sums(wwp.pa)
richness.bact = sample_sums(transform_sample_counts(bact, function(abund) 1*(abund>0)))
richness.fung = sample_sums(transform_sample_counts(fung, function(abund) 1*(abund>0)))
richness.fung
ssc = data.frame(Sand = sample_data(wwp.pa)$per_sand, Silt = sample_data(wwp.pa)$per_silt, Clay = sample_data(wwp.pa)$per_clay)
ssc.bact = data.frame(Sand = sample_data(bact)$per_sand, Silt = sample_data(bact)$per_silt, Clay = sample_data(bact)$per_clay)
ssc.fung = data.frame(Sand = sample_data(fung)$per_sand, Silt = sample_data(fung)$per_silt, Clay = sample_data(fung)$per_clay)
ssc.fung
# Explore soils data
# load packages ####
library(tidyverse)
library(ggplot2)
library(ggtern)
library(plyr)
# load phyloseq object (Full WWP data set) ####
wwp = readRDS("./output/WWP_Full_phyloseq_object.RDS")
wwp.pa = readRDS("./output/WWP_Full_phyloseq_object_presence-absence.RDS")
bact = readRDS("./output/WWP_16S_phyloseq.RDS")
fung = readRDS("./output/WWP_ITS_phyloseq.RDS")
# remove any empty samples or ASVs
wwp.pa = subset_taxa(wwp.pa, sample_sums(wwp.pa) > 0)
bact = subset_taxa(bact, sample_sums(bact) > 0)
fung = subset_taxa(fung, sample_sums(fung) > 0)
wwp.pa = subset_samples(wwp.pa, taxa_sums(wwp.pa) > 0)
bact = subset_samples(bact, taxa_sums(bact) > 0)
fung = subset_samples(fung, taxa_sums(fung) > 0)
# Examine metadata ####
glimpse(as.data.frame(sample_data(wwp.pa)))
glimpse(as.data.frame(sample_data(fung)))
# Species richness (bact + fungi)
richness.total = sample_sums(wwp.pa)
richness.bact = sample_sums(transform_sample_counts(bact, function(abund) 1*(abund>0)))
richness.fung = sample_sums(transform_sample_counts(fung, function(abund) 1*(abund>0)))
# Sand-Silt-Clay Plot ####
# make sand-silt-clay df
ssc = data.frame(Sand = sample_data(wwp.pa)$per_sand, Silt = sample_data(wwp.pa)$per_silt, Clay = sample_data(wwp.pa)$per_clay)
ssc.bact = data.frame(Sand = sample_data(bact)$per_sand, Silt = sample_data(bact)$per_silt, Clay = sample_data(bact)$per_clay)
ssc.fung = data.frame(Sand = sample_data(fung)$per_sand, Silt = sample_data(fung)$per_silt, Clay = sample_data(fung)$per_clay)
# Make base plot of soil textures chart
data(USDA)
# Put tile labels at the midpoint of each tile.
USDA.LAB = ddply(USDA, 'Label', function(df) {
apply(df[, 1:3], 2, mean)
})
# Tweak
USDA.LAB$Angle = 0
USDA.LAB$Angle[which(USDA.LAB$Label == 'Loamy Sand')] = -35
base = ggplot(data = USDA, aes(y=Clay, x=Sand, z=Silt)) +
coord_tern(L="x",T="y",R="z") +
geom_polygon(alpha = 0.75, size = 0.5, color = 'black',aes(color=Label,fill=Label)) +
geom_text(data = USDA.LAB,
aes(label = Label, angle = Angle),
color = 'black',
size = 3.5) +
theme_rgbw() +
theme_showsecondary() +
theme_showarrows() +
custom_percent("Percent") +
theme(legend.justification = c(0, 1),
legend.position      = c(0, 1)) +
labs(title = 'USDA Textural Classification Chart',
fill  = 'Textural Class',
color = 'Textural Class')
base + geom_point(data=ssc,alpha = .25, aes(size=richness.total)) + labs(size = "Total Richness")
ggsave("./output/figs/Soil_Textures_w_Total_Richness.png", dpi=300,width = 12,height = 12)
base + geom_point(data=ssc.bact,alpha = .25, aes(size=richness.bact)) + labs(size = "Bacterial Richness")
ggsave("./output/figs/Soil_Textures_w_Bacteria_Richness.png", dpi=300,width = 12,height = 12)
base + geom_point(data=ssc.fung,alpha = .25, aes(size=richness.fung)) + labs(size = "Fungal Richness")
ggsave("./output/figs/Soil_Textures_w_Fungal_Richness.png", dpi=300,width = 12,height = 12)
base + geom_point(data=ssc.fung,alpha = .25, aes(size=richness.fung)) + labs(size = "Fungal Richness")
base = ggplot(data = USDA, aes(y=Clay, x=Sand, z=Silt)) +
coord_tern(L="x",T="y",R="z") +
geom_polygon(alpha = 0.25, size = 0.5, color = 'black',aes(color=Label,fill=Label)) +
geom_text(data = USDA.LAB,
aes(label = Label, angle = Angle),
color = 'black',
size = 3.5) +
theme_rgbw() +
theme_showsecondary() +
theme_showarrows() +
custom_percent("Percent") +
theme(legend.justification = c(0, 1),
legend.position      = c(0, 1)) +
labs(title = 'USDA Textural Classification Chart',
fill  = 'Textural Class',
color = 'Textural Class')
base + geom_point(data=ssc,alpha = .25, aes(size=richness.total)) + labs(size = "Total Richness")
# Explore soils data
# load packages ####
library(tidyverse)
library(ggplot2)
library(ggtern)
library(plyr)
# load phyloseq object (Full WWP data set) ####
wwp = readRDS("./output/WWP_Full_phyloseq_object.RDS")
wwp.pa = readRDS("./output/WWP_Full_phyloseq_object_presence-absence.RDS")
bact = readRDS("./output/WWP_16S_phyloseq.RDS")
fung = readRDS("./output/WWP_ITS_phyloseq.RDS")
# remove any empty samples or ASVs
wwp.pa = subset_taxa(wwp.pa, sample_sums(wwp.pa) > 0)
bact = subset_taxa(bact, sample_sums(bact) > 0)
fung = subset_taxa(fung, sample_sums(fung) > 0)
wwp.pa = subset_samples(wwp.pa, taxa_sums(wwp.pa) > 0)
bact = subset_samples(bact, taxa_sums(bact) > 0)
fung = subset_samples(fung, taxa_sums(fung) > 0)
# Examine metadata ####
glimpse(as.data.frame(sample_data(wwp.pa)))
glimpse(as.data.frame(sample_data(fung)))
# Species richness (bact + fungi)
richness.total = sample_sums(wwp.pa)
richness.bact = sample_sums(transform_sample_counts(bact, function(abund) 1*(abund>0)))
richness.fung = sample_sums(transform_sample_counts(fung, function(abund) 1*(abund>0)))
# Sand-Silt-Clay Plot ####
# make sand-silt-clay df
ssc = data.frame(Sand = sample_data(wwp.pa)$per_sand, Silt = sample_data(wwp.pa)$per_silt, Clay = sample_data(wwp.pa)$per_clay)
ssc.bact = data.frame(Sand = sample_data(bact)$per_sand, Silt = sample_data(bact)$per_silt, Clay = sample_data(bact)$per_clay)
ssc.fung = data.frame(Sand = sample_data(fung)$per_sand, Silt = sample_data(fung)$per_silt, Clay = sample_data(fung)$per_clay)
# Make base plot of soil textures chart
data(USDA)
# Put tile labels at the midpoint of each tile.
USDA.LAB = ddply(USDA, 'Label', function(df) {
apply(df[, 1:3], 2, mean)
})
# Tweak
USDA.LAB$Angle = 0
USDA.LAB$Angle[which(USDA.LAB$Label == 'Loamy Sand')] = -35
base = ggplot(data = USDA, aes(y=Clay, x=Sand, z=Silt)) +
coord_tern(L="x",T="y",R="z") +
geom_polygon(alpha = 0.25, size = 0.5, color = 'black',aes(color=Label,fill=Label)) +
geom_text(data = USDA.LAB,
aes(label = Label, angle = Angle),
color = 'black',
size = 3.5) +
theme_rgbw() +
theme_showsecondary() +
theme_showarrows() +
custom_percent("Percent") +
theme(legend.justification = c(0, 1),
legend.position      = c(0, 1)) +
labs(title = 'USDA Textural Classification Chart',
fill  = 'Textural Class',
color = 'Textural Class')
base + geom_point(data=ssc,alpha = .25, aes(size=richness.total)) + labs(size = "Total Richness")
ggsave("./output/figs/Soil_Textures_w_Total_Richness.png", dpi=300,width = 12,height = 12)
base + geom_point(data=ssc.bact,alpha = .25, aes(size=richness.bact)) + labs(size = "Bacterial Richness")
ggsave("./output/figs/Soil_Textures_w_Bacteria_Richness.png", dpi=300,width = 12,height = 12)
base + geom_point(data=ssc.fung,alpha = .25, aes(size=richness.fung)) + labs(size = "Fungal Richness")
ggsave("./output/figs/Soil_Textures_w_Fungal_Richness.png", dpi=300,width = 12,height = 12)
# Explore soils data
# load packages ####
library(tidyverse)
library(ggplot2)
library(ggtern)
library(plyr)
# load phyloseq object (Full WWP data set) ####
wwp = readRDS("./output/WWP_Full_phyloseq_object.RDS")
wwp.pa = readRDS("./output/WWP_Full_phyloseq_object_presence-absence.RDS")
bact = readRDS("./output/WWP_16S_phyloseq.RDS")
fung = readRDS("./output/WWP_ITS_phyloseq.RDS")
# remove any empty samples or ASVs
wwp.pa = subset_taxa(wwp.pa, sample_sums(wwp.pa) > 0)
bact = subset_taxa(bact, sample_sums(bact) > 0)
fung = subset_taxa(fung, sample_sums(fung) > 0)
wwp.pa = subset_samples(wwp.pa, taxa_sums(wwp.pa) > 0)
bact = subset_samples(bact, taxa_sums(bact) > 0)
fung = subset_samples(fung, taxa_sums(fung) > 0)
# Examine metadata ####
glimpse(as.data.frame(sample_data(wwp.pa)))
glimpse(as.data.frame(sample_data(fung)))
# Species richness (bact + fungi)
richness.total = sample_sums(wwp.pa)
richness.bact = sample_sums(transform_sample_counts(bact, function(abund) 1*(abund>0)))
richness.fung = sample_sums(transform_sample_counts(fung, function(abund) 1*(abund>0)))
# Sand-Silt-Clay Plot ####
# make sand-silt-clay df
ssc = data.frame(Sand = sample_data(wwp.pa)$per_sand, Silt = sample_data(wwp.pa)$per_silt, Clay = sample_data(wwp.pa)$per_clay)
ssc.bact = data.frame(Sand = sample_data(bact)$per_sand, Silt = sample_data(bact)$per_silt, Clay = sample_data(bact)$per_clay)
ssc.fung = data.frame(Sand = sample_data(fung)$per_sand, Silt = sample_data(fung)$per_silt, Clay = sample_data(fung)$per_clay)
# Make base plot of soil textures chart
data(USDA)
# Put tile labels at the midpoint of each tile.
USDA.LAB = ddply(USDA, 'Label', function(df) {
apply(df[, 1:3], 2, mean)
})
# Tweak
USDA.LAB$Angle = 0
USDA.LAB$Angle[which(USDA.LAB$Label == 'Loamy Sand')] = -35
base = ggplot(data = USDA, aes(y=Clay, x=Sand, z=Silt)) +
coord_tern(L="x",T="y",R="z") +
geom_polygon(alpha = 0.25, size = 0.5, color = 'black',aes(color=Label,fill=Label)) +
geom_text(data = USDA.LAB,
aes(label = Label, angle = Angle),
color = 'black',
size = 3.5) +
theme_rgbw() +
theme_showsecondary() +
theme_showarrows() +
custom_percent("Percent") +
theme(legend.justification = c(0, 1),
legend.position      = c(0, 1)) +
labs(title = 'USDA Textural Classification Chart',
fill  = 'Textural Class',
color = 'Textural Class')
base + geom_point(data=ssc,alpha = .25, aes(size=richness.total)) + labs(size = "Total Richness")
sample_data(wwp.pa)
meta = as.data.frame(sample_data(wwp.pa))
# convert metadata to "vanilla" data frame
meta <- as(sample_data(wwp.pa), "data.frame")
class(meta)
names(meta)
gather(meta,key = Element, value = Value, 15:33)
elements = gather(meta,key = Element, value = Value, 15:33)
ggplot(elements, aes(x=Value, color = Element)) +
geom_histogram()
ggplot(elements, aes(x=Value, fill = Element)) +
geom_histogram() + facet_wrap(~Element)
ggplot(elements, aes(x=Value, fill = Element)) +
geom_histogram() + coord_flip() + facet_wrap(~Element)
ggplot(elements, aes(x=Value, fill = Element)) +
geom_histogram() + facet_wrap(~Element, scales = "free")
ggplot(elements, aes(x=Value, fill = Element)) +
geom_histogram() + facet_wrap(~Element, scales = "free") + theme_bw()
ggsave("./output/figs/Soil_Element_Distributions.png", dpi=300, width = 12, height = 12)
names(meta)[15:33]
element.names=c("Al","As","B","Ca","Cd","Co","Cr","Cu","Fe","K","Mg","Mn","Mo","Na","Ni","P","S","Ti","Zn")
elements = gather(meta,key = Element, value = Value, element.names)
ggplot(elements, aes(x=Value, fill = Element)) +
geom_histogram() + facet_wrap(~Element, scales = "free") + theme_bw()
ggplot(elements, aes(x=Value, fill = cluster)) +
geom_histogram() + facet_wrap(~Element, scales = "free") + theme_bw()
ggplot(elements, aes(x=Value, fill = factor(cluster))) +
geom_histogram() + facet_wrap(~Element, scales = "free") + theme_bw()
ggplot(elements, aes(x=Value, fill = factor(cluster))) +
geom_histogram(alpha=.25) + facet_wrap(~Element, scales = "free") + theme_bw()
ggplot(elements, aes(x=Value, fill = factor(cluster))) +
geom_density(alpha=.5) + facet_wrap(~Element, scales = "free") + theme_bw()
ggplot(elements, aes(x=Value, fill = factor(cluster))) +
geom_histogram(alpha=.5) + facet_wrap(~Element, scales = "free") + theme_bw()
ggsave("./output/figs/Soil_Element_Distributions_w_cluster.png", dpi=300, width = 12, height = 12)
library(vegan)
library(ade4)
spatial.dist = vegdist(cbind(wwp.pa@sam_data$lon, wwp.pa@sam_data$lat))
spatial.dist = dist(cbind(wwp.pa@sam_data$lon, wwp.pa@sam_data$lat))
comm.dist = vegdist(as.matrix(wwp.pa@otu_table))
mantel.test = mantel.rtest(spatial.dist, comm.dist, nrepet = 999)
spatial.dist = dist(cbind(wwp.pa@sam_data$lon, wwp.pa@sam_data$lat), method = "jaccard")
spatial.dist = vegdist(cbind(wwp.pa@sam_data$lon, wwp.pa@sam_data$lat), method = "jaccard")
comm.dist = vegdist(as.matrix(wwp.pa@otu_table))
mantel.test = mantel.rtest(spatial.dist, comm.dist, nrepet = 999)
spatial.dist = vegdist(cbind(wwp.pa@sam_data$lon, wwp.pa@sam_data$lat), method = "jaccard")
comm.dist = vegdist(as.matrix(wwp.pa@otu_table), method = "jaccard")
mantel.test = mantel.rtest(spatial.dist, comm.dist, nrepet = 999)
spatial.dist = dist(cbind(wwp.pa@sam_data$lon, wwp.pa@sam_data$lat))
comm.dist = dist(as.matrix(wwp.pa@otu_table))
mantel.test = mantel.rtest(spatial.dist, comm.dist, nrepet = 999)
ggplot(mapping = aes(x=jitter(spatial.dist,amount=1), y=comm.dist)) +
geom_point(alpha=.05) + stat_smooth(method = "lm") +
labs(x="Spatial Distance",y="Community Distance") + theme_bw()
mantel.test
spatial.dist.full = dist(cbind(wwp.pa@sam_data$lon, wwp.pa@sam_data$lat))
comm.dist.full = dist(as.matrix(wwp.pa@otu_table))
mantel.test = mantel.rtest(spatial.dist.full, comm.dist.full, nrepet = 999)
spatial.dist.full = dist(cbind(wwp.pa@sam_data$lon, wwp.pa@sam_data$lat))
comm.dist.full = dist(as.matrix(wwp.pa@otu_table))
mantel.test.full = mantel.rtest(spatial.dist.full, comm.dist.full, nrepet = 999)
ggplot(mapping = aes(x=jitter(spatial.dist,amount=1), y=comm.dist.full)) +
geom_point(alpha=.05) + stat_smooth(method = "lm") +
labs(x="Spatial Distance",y="Full Community Distance") + theme_bw()
ggsave("./output/figs/full_community_mantel.png", dpi=300)
spatial.dist.bact = dist(cbind(bact@sam_data$lon, bact@sam_data$lat))
comm.dist.bact = dist(as.matrix(bact@otu_table))
spatial.dist.bact = dist(cbind(bact@sam_data$lon, bact@sam_data$lat))
names(sample_data(bact))
spatial.dist.bact = dist(cbind(bact@sam_data$Longitude, bact@sam_data$Latitude))
comm.dist.bact = dist(as.matrix(bact@otu_table))
mantel.test.bact = mantel.rtest(spatial.dist.bact, comm.dist.bact, nrepet = 999)
?dist
spatial.dist.full = dist(cbind(wwp.pa@sam_data$lon, wwp.pa@sam_data$lat), method = "euclidean")
comm.dist.full = dist(as.matrix(wwp.pa@otu_table), method = "binary")
mantel.test.full = mantel.rtest(spatial.dist.full, comm.dist.full, nrepet = 999)
ggplot(mapping = aes(x=jitter(spatial.dist,amount=1), y=comm.dist.full)) +
geom_point(alpha=.05) + stat_smooth(method = "lm") +
labs(x="Spatial Distance",y="Full Community Distance") + theme_bw()
spatial.dist.bact = dist(cbind(bact@sam_data$Longitude, bact@sam_data$Latitude), method = "euclidean")
comm.dist.bact = dist(as.matrix(bact@otu_table), method = "binary")
mantel.test.bact = mantel.rtest(spatial.dist.bact, comm.dist.bact, nrepet = 999)
sample_data(bact)
# Explore soils data
# load packages ####
library(tidyverse)
library(ggplot2)
library(ggtern)
library(plyr)
library(vegan)
library(ade4)
# load phyloseq object (Full WWP data set) ####
wwp = readRDS("./output/WWP_Full_phyloseq_object.RDS")
wwp.pa = readRDS("./output/WWP_Full_phyloseq_object_presence-absence.RDS")
# bact = readRDS("./output/WWP_16S_phyloseq.RDS")
# fung = readRDS("./output/WWP_ITS_phyloseq.RDS")
# remove any empty samples or ASVs
wwp.pa = subset_taxa(wwp.pa, sample_sums(wwp.pa) > 0)
bact = subset_taxa(wwp, sample_sums(bact) > 0)
fung = subset_taxa(wwp, sample_sums(fung) > 0)
wwp.pa = subset_samples(wwp.pa, taxa_sums(wwp.pa) > 0)
bact = subset_samples(wwp, taxa_sums(bact) > 0)
fung = subset_samples(wwp, taxa_sums(fung) > 0)
# Examine metadata ####
glimpse(as.data.frame(sample_data(wwp.pa)))
glimpse(as.data.frame(sample_data(fung)))
# Species richness (bact + fungi)
richness.total = sample_sums(wwp.pa)
richness.bact = sample_sums(transform_sample_counts(bact, function(abund) 1*(abund>0)))
richness.fung = sample_sums(transform_sample_counts(fung, function(abund) 1*(abund>0)))
# Sand-Silt-Clay Plot ####
# make sand-silt-clay df
ssc = data.frame(Sand = sample_data(wwp.pa)$per_sand, Silt = sample_data(wwp.pa)$per_silt, Clay = sample_data(wwp.pa)$per_clay)
ssc.bact = data.frame(Sand = sample_data(bact)$per_sand, Silt = sample_data(bact)$per_silt, Clay = sample_data(bact)$per_clay)
ssc.fung = data.frame(Sand = sample_data(fung)$per_sand, Silt = sample_data(fung)$per_silt, Clay = sample_data(fung)$per_clay)
# Make base plot of soil textures chart
data(USDA)
# Put tile labels at the midpoint of each tile.
USDA.LAB = ddply(USDA, 'Label', function(df) {
apply(df[, 1:3], 2, mean)
})
# Tweak
USDA.LAB$Angle = 0
USDA.LAB$Angle[which(USDA.LAB$Label == 'Loamy Sand')] = -35
base = ggplot(data = USDA, aes(y=Clay, x=Sand, z=Silt)) +
coord_tern(L="x",T="y",R="z") +
geom_polygon(alpha = 0.25, size = 0.5, color = 'black',aes(color=Label,fill=Label)) +
geom_text(data = USDA.LAB,
aes(label = Label, angle = Angle),
color = 'black',
size = 3.5) +
theme_rgbw() +
theme_showsecondary() +
theme_showarrows() +
custom_percent("Percent") +
theme(legend.justification = c(0, 1),
legend.position      = c(0, 1)) +
labs(title = 'USDA Textural Classification Chart',
fill  = 'Textural Class',
color = 'Textural Class')
base + geom_point(data=ssc,alpha = .25, aes(size=richness.total)) + labs(size = "Total Richness")
ggsave("./output/figs/Soil_Textures_w_Total_Richness.png", dpi=300,width = 12,height = 12)
base + geom_point(data=ssc.bact,alpha = .25, aes(size=richness.bact)) + labs(size = "Bacterial Richness")
ggsave("./output/figs/Soil_Textures_w_Bacteria_Richness.png", dpi=300,width = 12,height = 12)
base + geom_point(data=ssc.fung,alpha = .25, aes(size=richness.fung)) + labs(size = "Fungal Richness")
ggsave("./output/figs/Soil_Textures_w_Fungal_Richness.png", dpi=300,width = 12,height = 12)
# explore soil metadata distributions ####
# convert metadata to "vanilla" data frame
meta <- as(sample_data(wwp.pa), "data.frame")
element.names=c("Al","As","B","Ca","Cd","Co","Cr","Cu","Fe","K","Mg","Mn","Mo","Na","Ni","P","S","Ti","Zn")
# add variable showing whether each sample is "mound" or "depression"
??????
# gather element values to make plotting easier
elements = gather(meta,key = Element, value = Value, element.names)
ggplot(elements, aes(x=Value, fill = Element)) +
geom_histogram() + facet_wrap(~Element, scales = "free") + theme_bw()
ggsave("./output/figs/Soil_Element_Distributions.png", dpi=300, width = 12, height = 12)
ggplot(elements, aes(x=Value, fill = factor(cluster))) +
geom_histogram(alpha=.5) + facet_wrap(~Element, scales = "free") + theme_bw()
ggsave("./output/figs/Soil_Element_Distributions_w_cluster.png", dpi=300, width = 12, height = 12)
# Mantel tests
# Mantel Test ####
spatial.dist.full = dist(cbind(wwp.pa@sam_data$lon, wwp.pa@sam_data$lat), method = "euclidean")
comm.dist.full = dist(as.matrix(wwp.pa@otu_table), method = "binary")
mantel.test.full = mantel.rtest(spatial.dist.full, comm.dist.full, nrepet = 999)
ggplot(mapping = aes(x=jitter(spatial.dist,amount=1), y=comm.dist.full)) +
geom_point(alpha=.05) + stat_smooth(method = "lm") +
labs(x="Spatial Distance",y="Full Community Distance") + theme_bw()
ggsave("./output/figs/full_community_mantel.png", dpi=300)
?dist
spatial.dist.bact = dist(cbind(bact@sam_data$Longitude, bact@sam_data$Latitude), method = "euclidean")
comm.dist.bact = dist(as.matrix(bact@otu_table), method = "binary")
mantel.test.bact = mantel.rtest(spatial.dist.bact, comm.dist.bact, nrepet = 999)
sample_data(bact)
mantel.test.full
mantel.test.bact
ord1 = ordinate(wwp.pa, method = "DCA")
plot_ordination(wwp.pa, ord1, size = pH)
plot_ordination(wwp.pa, ord1)
ord1 = ordinate(wwp.pa, method = "NMDS")
plot_ordination(wwp.pa, ord1)
ord1 = ordinate(wwp.pa, method = "CCA")
plot_ordination(wwp.pa, ord1)
otu_table(wwp.pa)
wcmd.full = wcmdscale(otu_table(wwp.pa,k=2, eig=TRUE,))
wcmd.full = wcmdscale(otu_table(wwp.pa),k=2, eig=TRUE))
wcmd.full = wcmdscale(otu_table(wwp.pa),k=2, eig=TRUE)
wcmd.full = wcmdscale(as.matrix(otu_table(wwp.pa)),k=2, eig=TRUE)
otu_table(wwp.pa)
otus = as.matrix(otu_table(wwp.pa))
otus = as(otu_table(wwp.pa),"matrix")
otus = as(otu_table(wwp.pa),"matrix")
wcmd.full = wcmdscale(otus,k=2, eig=TRUE)
vegdist(otus)
rowSums(otus)
is.na(otus)
otus[is.na(otus)] <- 0
wcmd.full = wcmdscale(otus,k=2, eig=TRUE)
otus = as(otu_table(wwp.pa),"data.frame")
wcmd.full = wcmdscale(otu_table(wwp.pa),k=2, eig=TRUE)
?wcmdscale
dist(otu_table(wwp.pa))
otus = dist(otu_table(wwp.pa))
wcmd.full = wcmdscale(otus,k=2, eig=TRUE)
biplot(wcmd.full)
stressplot.wcmdscale(wcmd.full)
stressplot(wcmd.full)
plot(wcmd.full)
wcmd.full$points[,1]
length(wcmd.full$points[,1])
wmcd1 = data.frame(Dim1 = wcmd.full$points[,1], Dim2 = wcmd.full$points[,2], culter = meta$cluster)
wmcd.df = data.frame(Dim1 = wcmd.full$points[,1], Dim2 = wcmd.full$points[,2], culter = meta$cluster)
ggplot(wcmd.df, aes(x=Dim1,y=Dim2, color = cluster)) +
geom_point()
wcmd.df = data.frame(Dim1 = wcmd.full$points[,1], Dim2 = wcmd.full$points[,2], culter = meta$cluster)
ggplot(wcmd.df, aes(x=Dim1,y=Dim2, color = cluster)) +
geom_point()
wcmd.df = data.frame(Dim1 = wcmd.full$points[,1], Dim2 = wcmd.full$points[,2], cluster = meta$cluster)
ggplot(wcmd.df, aes(x=Dim1,y=Dim2, color = cluster)) +
geom_point()
ggplot(wcmd.df, aes(x=Dim1,y=Dim2, color = factor(cluster))) +
geom_point()
sample_data(wwp.pa)$ele
sample_data(wwp.pa)
sample_data(wwp.pa)$Ele
plot(sample_data(wwp.pa)$Ele)
kmeans(sample_data(wwp.pa)$Ele,2)
kmeans(sample_data(wwp.pa)$Ele,2)$cluster
sample_data(wwp.pa)$elegroup = kmeans(sample_data(wwp.pa)$Ele,2)$cluster
sample_data(wwp.pa)$elegroup
cbind(sample_data(wwp.pa)$elegroup,sample_data(wwp.pa)$Ele)
sample_data(wwp.pa)$elegroup
sample_data(wwp.pa)$elegroup[sample_data(wwp.pa)$elegroup == 1]
summary(sample_data(wwp.pa)$elegroup)
summary(sample_data(wwp.pa)$Ele)
sample_data(wwp.pa)$Ele > 375.2
sum(sample_data(wwp.pa)$Ele > 375.2)
sum(sample_data(wwp.pa)$Ele >= 375.2)
sample_data(wwp.pa)$Ele[sample_data(wwp.pa)$Ele >= 375.2]
sample_data(wwp.pa)$elevgroup = sample_data(wwp.pa)$Ele >= 375.2
sample_data(wwp.pa)$Mound = sample_data(wwp.pa)$Ele >= 375.2
ggplot(wcmd.df, aes(x=Dim1,y=Dim2, color = Mound)) +
geom_point()
wcmd.df = data.frame(Dim1 = wcmd.full$points[,1], Dim2 = wcmd.full$points[,2], Mound = sample_data(wwp.pa)$Mound)
ggplot(wcmd.df, aes(x=Dim1,y=Dim2, color = Mound)) +
geom_point()
ggplot(wcmd.df, aes(x=Dim1,y=Dim2, color = Mound)) +
geom_point() + stat_ellipse()
